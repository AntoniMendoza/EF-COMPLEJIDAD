# -*- coding: utf-8 -*-
"""Pregunta_5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15wJ0esoz0n5jEsegylHueNdSTqdjEkFR
"""

# Commented out IPython magic to ensure Python compatibility.
# 
# 
# import heapq as hq
# import numpy as np
# import graphviz as gv
# import math
# 
# def dijkstra(G, s):
#   n = len(G)
#   visited = [False]*n
#   path = [-1]*n
#   cost = [math.inf]*n
# 
#   cost[s] = 0
#   pqueue = [(0, s)]
#   while pqueue:
#     g, u = hq.heappop(pqueue)
#     if not visited[u]:
#       visited[u] = True
#       for v, w in G[u]:
#         if not visited[v]:
#           f = g + w
#           if f < cost[v]:
#             cost[v] = f
#             path[v] = u
#             hq.heappush(pqueue, (f, v))
# 
#   return path, cost
# 
# %%writefile cities.txt
# 2
# 7
# Lima
# New-York
# CDMX
# Toronto
# Jeddah
# Abu-Dhabi
# Doha
# 11
# Lima New-York 850
# Lima CDMX 850
# New-York CDMX 880
# New-York Toronto 250
# CDMX Toronto 420
# New-York Jeddah 2000
# Jeddah Abu-Dhabi 300
# Toronto Abu-Dhabi 1200
# New-York Abu-Dhabi 1800
# Abu-Dhabi Doha 620
# New-York Doha 3000
# 1
# 5
# Lima
# BsAs
# Asunción
# Sao-Paulo
# Doha
# 4
# Lima BsAs 600
# BsAs Asunción 250
# Asunción Sao-Paulo 550
# Sao-Paulo Doha 2000
# 3
# 
# cities = []
# Graph = []
# Graphs = []
# 
# with open("cities.txt") as file:
#   for line in file:
#     hey = line.split()
#     if(len(hey) == 3):
#       if(hey[0] not in cities):
#         cities.append(hey[0])
#         Graph.append([])
#       Graph[len(Graph) - 1].append((hey[1], int(hey[2])))
# 
# print(cities)
# 
# def drawG_al(G, directed=False, weighted=False, path=[], layout="sfdp"):
#   graph = gv.Digraph("felicidad") if directed else gv.Graph("alegria")
#   graph.graph_attr["layout"] = layout
#   graph.edge_attr["color"] = "gray"
#   graph.node_attr["color"] = "orangered"
#   graph.node_attr["width"] = "0.1"
#   graph.node_attr["height"] = "0.1"
#   graph.node_attr["fontsize"] = "8"
#   graph.node_attr["fontcolor"] = "mediumslateblue"
#   graph.node_attr["fontname"] = "monospace"
#   graph.edge_attr["fontsize"] = "8"
#   graph.edge_attr["fontname"] = "monospace"
#   n = len(G)
#   added = set()
#   for v, u in enumerate(path):
#     if u != -1:
#       if weighted:
#         for vi, w in G[u]:
#           if vi == v:
#             break
#         graph.edge(str(u), str(v), str(w), dir="forward", penwidth="2", color="orange")
#       else:
#         graph.edge(str(u), str(v), dir="forward", penwidth="2", color="orange")
#       added.add(f"{u},{v}")
#       added.add(f"{v},{u}")
#   for u in range(n):
#     for v, w in G[u]:
#       draw = False
#       if not directed and not f"{u},{v}" in added:  
#         added.add(f"{u},{v}")
#         added.add(f"{v},{u}")
#         draw = True
#       elif directed:
#         draw = True
#       if draw:
#         if weighted:
#           graph.edge(str(u), str(v), str(w))
#         else:
#           graph.edge(str(u), str(v))
#   return graph
#     
# for index, city in enumerate(cities):
#   print(index, city)
# 
# path, cost = dijkstra(G, 3)
# print(path)
# print(cost)
# drawG_al(G, weighted=True, path=path)
# ```