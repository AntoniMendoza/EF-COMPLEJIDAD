# -*- coding: utf-8 -*-
"""pregunta 4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OPG1NIKVkiKurHsDI2P7l844PBp6va1D

##4A
Para solucionar el problema se hizo enfasis a la programación dinamica. Si bien es cierto nos piden calcular la maxima utilidad del conjunto que se desa trasladar, entonces el problema hace referencia a la mochila. 

De esta forma se dio solución:

PASOS:

1.- Se escogió entre n objetos cada uno con un peso epecifico.

2.- Se toma en cuenta de que solo se puede llevar un determinado peso.

3.- Considerar que de todos los objetos se va a tomar y otros dejar.

4.- Tener en cuenta de que todos los objetos elegidos sera el maximo permitido 
que se puede llevar.

5.- Se creará arreglos a modo de prueba con los datos brindados del problema.

6.- Programar matriz y encontrar el maximo valor de kg a llevar, finalmente se presenta datos y calculos mediante la matriz. 

Los productos transportados son de tamaño 3 y 4

##4B
"""

import numpy as np

def knapsack(i, j, W, V, C, capacity, accum):
    if i == 0 or j == 0 or accum == capacity:
        C[i, j] = 0
    else:
        if C[i - 1, j] == -1:
            knapsack(i - 1, j, W, V, C, capacity, accum)
        if W[i] <= j and C[i - 1, j - W[i]] == -1:
            knapsack(i - 1, j - W[i], W, V, C, capacity, accum)
        if W[i] > j:
            C[i, j] = C[i - 1, j]

        else:
          if(accum <= capacity):
            C[i, j] = max(V[i] + C[i - 1, j - W[i]], C[i - 1, j])
            accum = accum + C[i, j]

N = 3
M = 4
capacity = 15
V = [3, 4, 5, 6]
W = [2, 3, 4, 5]
C = np.zeros((N + 1, M + 1)) - 1
print(C)
knapsack(N, M, W, V, C, 15, 0)
print(C)

weight = 0
value = 1
for value in C:
  weight = weight + value[4]

print(weight )